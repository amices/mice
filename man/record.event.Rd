% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/internal.R
\name{record.event}
\alias{record.event}
\title{Record an event in the imputation log}
\usage{
record.event(out = NULL, meth = NULL, frame = 1, logenv = NULL)
}
\arguments{
\item{out}{A character string describing the event or the affected variable.}

\item{meth}{Optional method name associated with the event. If \code{NULL}, the method
from the current logging state will be used.}

\item{frame}{Stack frame level used in fallback mode when \code{logenv} is not available.
Default is \code{2}.}

\item{logenv}{Optional logging environment to store log entries and the current state.
If not supplied, the function attempts to log using \code{updateLog()} as fallback.}
}
\value{
This function is called for its side effects. It returns \code{invisible(NULL)}.
}
\description{
Records a logged event during the imputation process. This function is the
modern replacement for \code{updateLog()}, supporting both sequential and
parallel execution through an explicit logging environment.
}
\details{
If \code{logenv} is provided and contains a valid logging state (\code{logenv$state}),
the function appends a log entry to \code{logenv$log} and sets \code{logenv$state$log <- TRUE}.
This is compatible with parallel execution using the \code{future} framework.

When \code{logenv} is not provided, \code{record.event()} calls \code{mice:::updateLog()} using the legacy
frame-based mechanism.
}
\section{Advanced}{

This function is intended primarily for package authors and developers of
custom imputation methods that integrate with the \code{mice} framework. It replaces
the internal \code{updateLog()} function to support structured, parallel-safe logging.
}

\seealso{
\code{\link[=mice]{mice()}}
}
