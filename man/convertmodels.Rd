% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert.R
\name{p2f}
\alias{p2f}
\alias{p2c}
\alias{f2p}
\title{Convert predictorMatrix to formalas}
\usage{
p2f(predictorMatrix, blocks = NULL, silent = TRUE)

p2c(predictorMatrix)

f2p(formulas, data, blocks = NULL, roles = NULL)
}
\arguments{
\item{predictorMatrix}{A square numeric matrix of maximal \eqn{p} rows and
maximal \eqn{p} columns. Row- and column names are
\code{colnames(data)}.
Each row corresponds to a variable to be imputed.
A value of \code{1} means that the column variable is a
predictor for the row variable, while a \code{0} means that
the column variable is not a predictor. The default
\code{predictorMatrix} is \code{1} everywhere, except for a zero
diagonal. Row- and column-names are optional for the
maximum \eqn{p} by \eqn{p} size. The user may specify a
smaller \code{predictorMatrix}, but column and row names are
then mandatory and should match be part of \code{colnames(data)}.
For variables that are not imputed, \code{mice()} automatically
sets the corresponding rows in the \code{predictorMatrix} to
zero. See details on \emph{skipping imputation}.
Two-level imputation models (which have \code{"2l"} in their
names) support other codes than \code{0} and \code{1}, e.g, \code{2}
or \code{-2} that assign special roles to some variables.}

\item{blocks}{List of \eqn{q} character vectors that identifies the
variable names per block. The name of list elements
identify blocks. \code{mice()} will provide default names
(\code{"B1"}, \code{"B2"}, ...) for blocks containing multiple
variables. Variables within a block are imputed as a
block, e.g. by a multivariate imputation method, or
by an iterated version of the same univariate imputation
method. By default each variable is allocated to a
separate block, which is effectively fully conditional
specification (FCS) by univariate models
(variable-by-variable imputation).
All data variables are assigned to a block.
A variable can belong to only one block, so there are
at most \eqn{p} blocks.
See the \code{parcel} argument for an easier alternative to
the \code{blocks} argument.}

\item{silent}{Logical for additional diagnostics}

\item{formulas}{A named list with \eqn{q} component, each containing
one formula. The left hand side (LHS) specifies the
variables to be imputed, and the right hand side (RHS)
specifies the predictors used for imputation. For example,
model \code{y1 + y2 ~ x1 + x2} imputes \code{y1} and \code{y2} using \code{x1}
and \code{x2} as predictors. Imputation by a multivariate
imputation model imputes \code{y1} and \code{y2} simultaneously
by a joint model, whereas \code{mice()} can also impute
\code{y1} and \code{y2} by a repeated univariate model as
\code{y1 ~ y2 + x1 + x2} and \code{y2 ~ y1 + x1 + x2}.
The \code{formulas} argument is an alternative to the
combination of the \code{predictorMatrix} and
\code{blocks} arguments. It is more compact and allows for
more flexibility in specifying imputation models,
e.g., for adding
interaction terms (\code{y1 + y2 ~ x1 * x2} ),
logical variables (\code{y1 + y2 ~ x1 + (x2 > 20)}),
three-level categories (\code{y1 + y2 ~ x1 + cut(age, 3)}),
polytomous terms (\code{y1 + y2 ~ x1 + poly(age, 3)},
smoothing terms (\code{y1 + y2 ~ x1 + bs(age)}),
sum scores (\code{y1 + y2 ~ I(x1 + x2)}) or
quotients (\code{y1 + y2 ~ I(x1 / x2)})
on the fly.
Optionally, the user can name formulas. If not named,
\code{mice()} will name formulas with multiple variables
as \code{F1}, \code{F2}, and so on. Formulas with one
dependent (e.g. \code{ses ~ x1 + x2}) will be named
after the dependent variable \code{"ses"}.}

\item{data}{Data frame with \eqn{n} rows and \eqn{p} columns with
incomplete data.  Missing values are coded as \code{NA}.}

\item{roles}{A list with \code{ncol(data)} elements, each with a row of the
\code{predictorMatrix} when it contains values other than 0 or 1.
The argument is only needed if the model contains non-standard
values in the \code{predictorMatrix}.}
}
\description{
Convert predictorMatrix to formalas

Convert predictorMatrix into roles

Convert formulas into predictorMatrix
}
