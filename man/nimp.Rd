% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nimp.R
\name{nimp}
\alias{nimp}
\title{Number of imputations per block}
\usage{
nimp(data = NULL, where = is.na(data), blocks = make.blocks(where))
}
\arguments{
\item{data}{Data frame with \eqn{n} rows and \eqn{p} columns with
incomplete data.  Missing values are coded as \code{NA}.}

\item{where}{A data frame or matrix of logicals with \eqn{n} rows
and \eqn{p} columns, indicating the cells of \code{data} for
which imputations are generated.
The default \code{where = is.na(data)} specifies that all
missing data are imputed.
The \code{where} argument can overimpute cells
with observed data, or skip imputation of specific missing
cells. Be aware that the latter option could propagate
missing values to other variables. See details.
Note: Methods that generate multivariate imputations
(e.g. \code{mice.impute.panImpute()}) do not honour the
\code{where} argument.}

\item{blocks}{List of vectors with variable names per block. List elements
may be named to identify blocks. Variables within a block are
imputed by a multivariate imputation method
(see \code{method} argument). By default each variable is placed
into its own block, which is effectively
fully conditional specification (FCS) by univariate models
(variable-by-variable imputation). Only variables whose names appear in
\code{blocks} are imputed. The relevant columns in the \code{where}
matrix are set to \code{FALSE} of variables that are not block members.
A variable may appear in multiple blocks. In that case, it is
effectively re-imputed each time that it is visited.}
}
\value{
A numeric vector of length \code{length(blocks)} containing
the number of cells that need to be imputed within a block.
}
\description{
Calculates the number of cells within a block for which imputation
is requested.
}
\examples{
# standard FCS
nimp(nhanes2)

# user-defined blocks
where <- is.na(nhanes)
blocks <- list(c("bmi", "hyp"), "age", "chl")
nimp(where = where, blocks = blocks)
}
\seealso{
\code{\link[=mice]{mice()}}
}
