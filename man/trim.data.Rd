% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trim.data.R
\name{trim.data}
\alias{trim.data}
\alias{mice.trim.lindep}
\alias{mice.trim.lars}
\alias{mice.trim.glmnet}
\alias{mice.trim.cv.glmnet}
\alias{remove.lindep}
\title{Trims rows and columns of predictors before univariate imputation}
\usage{
trim.data(y, ry, x, trimmer = "lindep", allow.na = TRUE, ...)

mice.trim.lindep(y, ry, x, frame = 5, ...)

mice.trim.lars(
  y,
  ry,
  x,
  lars.type = c("lar", "lasso", "forward.stagewise", "stepwise"),
  max.predictors = NULL,
  lars.relax = 5,
  minimal.cp = 1,
  ...
)

mice.trim.glmnet(y, ry, x, dfmax = NULL, ...)

mice.trim.cv.glmnet(y, ry, x, dfmax = NULL, ...)

remove.lindep(
  x,
  y,
  ry,
  eps = 1e-04,
  maxcor = 0.99,
  frame = 4,
  expects.complete.x = TRUE,
  ...
)
}
\arguments{
\item{y}{Numeric vector of length \code{length(y)} with the target variable.
If not numeric, it will be converted to numeric.}

\item{ry}{Logical vector of length \code{length(ry)} indicating which
observations are observed for the target variable.}

\item{x}{Numeric design matrix with predictors, for example, as produced
by \code{model.matrix()}. The matrix must have the same number of rows as
\code{length(y)} and \code{length(ry)}.}

\item{trimmer}{A string identifying the trimming function. The default is
\code{"lindep"}, which call \code{mice.trim.lindep()}. Other trimmers
include \code{"lars"}, \code{"glmnet"}, \code{"cv.glmnet"} or a custom
trimming function. Turn off trimming by \code{trimmer = ""}.}

\item{allow.na}{Logical. If \code{TRUE}, allow imputation of fully
missing \code{y}. Typically, this only occurs for passive imputation.
The default is \code{TRUE}.}

\item{...}{Other named arguments.}

\item{frame}{Integer. The frame number for logging. Do not alter.}

\item{lars.type}{Character. The type of model to fit. Could be
\code{"lar"}, \code{"lasso"}, \code{"forward.stagewise"} or
\code{"stepwise"}.}

\item{max.predictors}{Integer. The maximum number of variables to include.
The default \code{NULL} does not use a maximum.}

\item{lars.relax}{Numeric. Percent minimum Cp value that is
added to the minimum Cp to relax the inclusion threshold. The default is 5.
Use 1-5 percent for a slightly more permissive filter, 5-10 percent
for a moderate permissive filter, and 10-20 percent for very permissive.}

\item{minimal.cp}{Numeric. The minimum \code{"Cp"} value to consider.
\code{"Cp"} may become negative for small samples.
\code{minimal_cp} is the minimum \code{"Cp"} value used as to define the
threshold for the filter. Higher values select more predictors.
The default is 1.}

\item{dfmax}{Limit the maximum number of variables in the model. Useful for
very large \code{nvars}, if a partial path is desired.}

\item{eps}{Numeric. Used by \code{remove.lindep()} as the threshold for
the ratio of the smallest to the largest eigenvalue of the correlation
matrix. The default is 1e-04. Setting \code{eps = 0} bypasses
\code{remove.lindep()} and returns all variables.
Note: In \code{lars.trimmer()} the \code{eps} argument has a different
meaning.}

\item{maxcor}{Numeric. The maximum correlation between a predictor and the
target variable. The default is 0.99.}

\item{expects.complete.x}{Logical. If \code{TRUE}, the function expects
the data in \code{x} to be complete (used in mice <= 3.17.0).
If \code{FALSE}, the function uses only the observed values to calculate
(co)variances from incomplete data in \code{x}.}
}
\value{
A list with elements named \code{"rows"} and \code{"cols"},
logical vectors of lengths \code{nrow(x)} and \code{ncol(x)}, respectively.

A logical vector of length \code{ncol(x)} indicating the predictors
to keep.

A logical vector of length \code{ncol(x)} indicating which predictors
to keep.
}
\description{
\code{trim.data()} returns two array of logicals, one for rows and one
for columns. The function filters out predictors that do not contribute to
the prediction of the target variable.
The user can select one of the following trimming functions:
\code{mice.trim.lindep()} (a wrapper of \code{remove.lindep()}),
\code{mice.trim.lars()}, \code{mice.trim.glmnet()},
\code{mice.trim.cv.glmnet()} or call a custom trimming function.

\code{mice.trim.lindep()} is a wrapper of \code{remove.lindep()}, the
classic MICE safety net to prevent multicollinearity and other numerical
problems.

\code{trim.lars()} is a fast way to filter predictors by least angle
regression (LARS).

\code{remove.lindep()} prevents multicollinearity
in the imputation model. It removes predictors that are constant or have
too high correlation with the target variable. The function
uses the eigenvalues of the correlation matrix to detect multicollinearity.
}
\details{
Filtering works on the design matrix \code{x}. The filter excludes columns
that do not contribute to the prediction of \code{y[ry]}. The filter
may omit columns of \code{x}. Removing a column that corresponds to a factor
level is equivalent to collapsing that level to the reference category.

The function bypasses the column trimmer in the following cases:
\describe{
  \item{1}{If \code{y} is allowed to be fully missing.}
  \item{2}{If there are zero entries of \code{y} observed.}
  \item{3}{If there are zero or 1 predictors.}
  \item{4}{If the user specifies \code{trimmer = ""}.}
}

Trimmers like \code{mice.trim.lars()} change the behaviour of the
MICE algorithm. They are more aggressive in removing predictors than
the classic \code{remove.lindep()} function. For backward compatibility,
set \code{trimmer = "lindep"} to your call like
\code{mice(..., trimmer = "lindep")}.

\code{mice.trim.lars()} fits a LARS model to the elements of the design
matrix \code{x} and the target variable \code{y[ry]}. The procedure
removes rows with missing data before calling \code{lars()}.

\code{remove.lindep()} is the classic MICE safety net to prevent
multicollinearity and other numerical problems. It is a more
conservative filter than \code{trim.lars()}.
}
\examples{
# Impute according to old baheviour (remove.lindep())
imp <- mice(nhanes, m = 1, maxit = 1, print = FALSE, trimmer = "lindep")

# Trim predictors using LARS
imp <- mice(nhanes, m = 1, maxit = 1, print = FALSE, trimmer = "lars")

# Impute without a trim function
imp <- mice(nhanes, m = 1, maxit = 1, print = FALSE, trimmer = "")
}
